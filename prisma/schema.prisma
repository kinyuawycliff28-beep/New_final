// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  telegramId  String   @unique
  username    String?
  firstName   String
  lastName    String?
  fullName    String
  age         Int
  gender      Gender
  bio         String
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  photos      Photo[]
  sentLikes   Like[]   @relation("LikeSender")
  receivedLikes Like[] @relation("LikeReceiver")
  sentMatches Match[]  @relation("MatchSender")
  receivedMatches Match[] @relation("MatchReceiver")
  sentMessages ChatMessage[] @relation("MessageSender")
  receivedMessages ChatMessage[] @relation("MessageReceiver")

  @@map("users")
}

model Photo {
  id        String   @id @default(cuid())
  userId    String
  publicId  String
  secureUrl String
  isMain    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model Like {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())

  sender   User @relation("LikeSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("LikeReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("likes")
}

model Match {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())

  sender   User @relation("MatchSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MatchReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  messages ChatMessage[]

  @@unique([senderId, receiverId])
  @@map("matches")
}

model ChatMessage {
  id        String   @id @default(cuid())
  matchId   String
  senderId  String
  receiverId String
  content   String
  createdAt DateTime @default(now())

  match    Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  sender   User  @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User  @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

enum Gender {
  MALE
  FEMALE
}
